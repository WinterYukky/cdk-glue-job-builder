import { IGrantable, Grant } from 'aws-cdk-lib/aws-iam';
import { CodeFragment } from '../code-builder';
import { NodeBase } from '../node';

/**
 * Type representing a null value.
 */
export enum RepresentNullType {
  STRING = 'string',
  INTEGER = 'integer',
}

export class RepresentNullValue {
  /**
   * Empty String ("" or '')
   */
  static emptyString(): RepresentNullValue {
    return RepresentNullValue.string('');
  }
  /**
   * "null" String
   */
  static nullString(): RepresentNullValue {
    return RepresentNullValue.string('null');
  }
  /**
   * -1 Integer
   */
  static minusOne(): RepresentNullValue {
    return RepresentNullValue.integer(-1);
  }
  /**
   * Create a new {@link RepresentNullValue} from string value.
   * @param value represent null value
   * @returns new {@link RepresentNullValue}
   */
  static string(value: string): RepresentNullValue {
    return new RepresentNullValue(RepresentNullType.STRING, value);
  }
  /**
   * Create a new {@link RepresentNullValue} from number value.
   * @param value represent null value
   * @returns new {@link RepresentNullValue}
   */
  static integer(value: number): RepresentNullValue {
    return new RepresentNullValue(RepresentNullType.INTEGER, value.toString());
  }
  private constructor(
    readonly type: RepresentNullType,
    readonly value: string
  ) {}
}

/**
 * Props of DropNullFields.
 */
export interface DropNullFieldsProps {
  /**
   * Field you want to drop.
   *
   * @example
   * Transform.dropNullFields({
   *  fields: [
   *    RepresentNullValue.emptyString(),
   *    RepresentNullValue.nullString(),
   *  ]
   * })
   */
  readonly fields: RepresentNullValue[];
  /**
   * The node name.
   *
   * @default 'Drop Null Fields'
   */
  readonly name?: string;
}

/**
 * Remove fields or columns where all the values are the null objects.
 */
export class DropNullFields extends NodeBase {
  private readonly fields: RepresentNullValue[];
  constructor(id: string, props: DropNullFieldsProps) {
    super(id, props.name ?? 'Drop Null Fields');
    this.fields = props.fields;
  }

  python(): CodeFragment {
    if (this.inputs.length !== 1) {
      throw new Error(
        `You need to choose exactly 1 parent(s) for DropNullFields Transform. Now ${this.inputs.length} parent(s).`
      );
    }
    const nullStrings = Array.from(
      new Set(
        this.fields
          .filter((field) => field.type === RepresentNullType.STRING)
          .map((field) => `"${field.value}"`)
      )
    );
    const nullNumbers = Array.from(
      new Set(
        this.fields
          .filter((field) => field.type === RepresentNullType.INTEGER)
          .map((field) => field.value)
      )
    );
    const code = [
      `# Script generated by CDK for node ${this.name}`,
      `${this.nodeId} = drop_nulls(`,
      `    glueContext,`,
      `    frame=${this.inputs[0].nodeId},`,
      `    nullStringSet={${nullStrings.join(', ')}},`,
      `    nullIntegerSet={${nullNumbers.join(', ')}},`,
      `    transformation_ctx="${this.nodeId}",`,
      `)`,
    ].join('\n');
    return {
      imports: [
        `from awsglue.gluetypes import *`,
        `from awsglue import DynamicFrame`,
      ],
      head: [findNullFields, dropNulls],
      body: [code],
    };
  }
  scala(): CodeFragment {
    throw new Error('Method not implemented.');
  }
  grant(_job: IGrantable): Grant | undefined {
    return undefined;
  }
}

const findNullFields = `def _find_null_fields(ctx, schema, path, output, nullStringSet, nullIntegerSet, frame):
    if isinstance(schema, StructType):
        for field in schema:
            new_path = path + "." if path != "" else path
            output = _find_null_fields(
                ctx,
                field.dataType,
                new_path + field.name,
                output,
                nullStringSet,
                nullIntegerSet,
                frame,
            )
    elif isinstance(schema, ArrayType):
        if isinstance(schema.elementType, StructType):
            output = _find_null_fields(
                ctx,
                schema.elementType,
                path,
                output,
                nullStringSet,
                nullIntegerSet,
                frame,
            )
    elif isinstance(schema, NullType):
        output.append(path)
    else:
        x, distinct_set = frame.toDF(), set()
        for i in x.select(path).distinct().collect():
            distinct_ = i[path.split(".")[-1]]
            if isinstance(distinct_, list):
                distinct_set |= set(
                    [
                        item.strip() if isinstance(item, str) else item
                        for item in distinct_
                    ]
                )
            elif isinstance(distinct_, str):
                distinct_set.add(distinct_.strip())
            else:
                distinct_set.add(distinct_)
        if isinstance(schema, StringType):
            if distinct_set.issubset(nullStringSet):
                output.append(path)
        elif (
            isinstance(schema, IntegerType)
            or isinstance(schema, LongType)
            or isinstance(schema, DoubleType)
        ):
            if distinct_set.issubset(nullIntegerSet):
                output.append(path)
    return output`;

const dropNulls = `def drop_nulls(
    glueContext, frame, nullStringSet, nullIntegerSet, transformation_ctx
    ) -> DynamicFrame:
    nullColumns = _find_null_fields(
        frame.glue_ctx, frame.schema(), "", [], nullStringSet, nullIntegerSet, frame
    )
    return DropFields.apply(
        frame=frame, paths=nullColumns, transformation_ctx=transformation_ctx
    )`;
