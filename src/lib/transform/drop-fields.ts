import { IGrantable, Grant } from 'aws-cdk-lib/aws-iam';
import { CodeFragment } from '../code-builder';
import { NodeBase } from '../node';

/**
 * Props of DropFields.
 */
export interface DropFieldsProps {
  /**
   * Field you want to drop.
   */
  readonly fields: string[];
  /**
   * The node name.
   *
   * @default 'Drop Fields'
   */
  readonly name?: string;
}

/**
 * Remove selected fields from your data.
 */
export class DropFields extends NodeBase {
  private readonly fields: string[];
  constructor(id: string, props: DropFieldsProps) {
    super(id, props.name ?? 'Drop Fields');
    this.fields = props.fields;
  }

  python(): CodeFragment {
    if (this.inputs.length !== 1) {
      throw new Error(
        `You need to choose exactly 1 parent(s) for DropFields Transform. Now ${this.inputs.length} parent(s).`
      );
    }
    const code = [
      `# Script generated by CDK for node ${this.name}`,
      `${this.nodeId} = DropFields.apply(`,
      `    frame=${this.inputs[0].nodeId},`,
      `    paths=${JSON.stringify(this.fields)},`,
      `    transformation_ctx="${this.nodeId}",`,
      `)`,
    ].join('\n');
    return {
      body: [code],
    };
  }
  scala(): CodeFragment {
    throw new Error('Method not implemented.');
  }
  grant(_job: IGrantable): Grant | undefined {
    return undefined;
  }
}
