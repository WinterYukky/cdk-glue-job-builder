import { App, Stack } from 'aws-cdk-lib';
import { Role, ServicePrincipal } from 'aws-cdk-lib/aws-iam';
import { Transform } from '../src';
import { SomeNode } from './node.test';

describe('DropFields', () => {
  test('Must be able to specify name', () => {
    const defaultName = Transform.dropFields('node1', {
      fields: ['will_drop'],
    });
    const specifyName = Transform.dropFields('node2', {
      name: 'Specify Name',
      fields: ['will_drop'],
    });
    expect(defaultName.name).toBe('Drop Fields');
    expect(specifyName.name).toBe('Specify Name');
  });

  test('If not provide granter and grant then not throw error', () => {
    const app = new App();
    const stack = new Stack(app, 'MyStack');
    const catalog = Transform.dropFields('node1', {
      fields: ['will_drop'],
    });
    catalog.grant(
      new Role(stack, 'Role', {
        assumedBy: new ServicePrincipal('glue.amazonaws.com'),
      })
    );
  });

  test('No inputs and build then python throw error', () => {
    const dropFields = Transform.dropFields('node1', {
      fields: ['will_drop'],
    });
    expect(() => dropFields.python()).toThrow(
      'The drop field node used to require one input node, but now there are 0 input nodes available.'
    );
  });

  test('2 inputs and build then python throw error', () => {
    const dropFields = Transform.dropFields('node1', {
      fields: ['will_drop1', 'will_drop2'],
    });
    new SomeNode('Input1').to(dropFields);
    new SomeNode('Input2').to(dropFields);
    expect(() => dropFields.python()).toThrow(
      'The drop field node used to require one input node, but now there are 2 input nodes available.'
    );
  });

  test('Python should build code', () => {
    const dropFields = Transform.dropFields('node1', {
      fields: ['will_drop1', 'will_drop2'],
    });
    const prevNode = new SomeNode('prev_node');
    prevNode.to(dropFields);
    const code = dropFields.python();
    expect(code.imports).toStrictEqual([]);
    expect(code.body).toStrictEqual([
      `# Script generated by CDK for node Drop Fields
DropFields_node1 = DropFields.apply(
    frame=SomeNode_prev_node,
    paths=[\"will_drop1\",\"will_drop2\"],
    transformation_ctx=\"DropFields_node1\",
)`,
    ]);
  });

  test('Scala not implement', () => {
    const dropFields = Transform.dropFields('DropFields', {
      fields: ['will_drop1', 'will_drop2'],
    });
    const prevNode = new SomeNode('prev_node');
    prevNode.to(dropFields);
    expect(() => dropFields.scala()).toThrow();
  });
});
